rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function signedIn() {
      return request.auth.uid != null;
    }
    function memberOfResource(resource) {
      return request.auth.uid in resource.data.members;
    }
    function memberOfTrack(trackId) {
      return request.auth.uid in get(/databases/$(database)/documents/tracks/$(trackId)).data.members;
    }

    match /{document=**} {
      allow read, write: if false;
    }
    match /users/{userId} {
      allow read: if signedIn();
    }
    match /tracks/{trackId} {
      allow read: if signedIn()
        && memberOfResource(resource)
        ;
      allow create: if signedIn()
        && request.resource.data.members == [request.auth.uid]
        ;
      allow update: if signedIn()
        && memberOfResource(resource)
        && request.resource.data.members.size() >= 1
        && request.resource.data.members.hasAll(resource.data.members.removeAll([request.auth.uid]))
        ;
      allow delete: if signedIn()
        && resource.data.members == [request.auth.uid]
        ;
    }
    match /steps/{stepId} {
      allow read: if signedIn()
        && memberOfTrack(resource.data.track_id)
        ;
      allow create: if signedIn()
        && request.auth.uid == request.resource.data.posted_by
        && memberOfTrack(request.resource.data.track_id)
        ;
      allow update: if signedIn()
        && request.auth.uid == request.resource.data.posted_by
        && request.resource.data.posted_by == resource.data.posted_by
        && request.resource.data.track_id == resource.data.track_id
        && memberOfTrack(resource.data.track_id)
        ;
      allow delete: if signedIn()
        && request.auth.uid == resource.data.posted_by
        && memberOfTrack(resource.data.track_id)
        ;
    }
  }
}
